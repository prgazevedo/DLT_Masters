# OpenSSL intermediate CA configuration file.
# Copy to `/root/ca/intermediate/openssl.cnf`.


[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = .
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = $dir/private/intermediate.key.pem
certificate       = $dir/certs/intermediate.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/intermediate.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_loose


[ policy_loose ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional
subjectAltName          = supplied


[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
default_md          = sha256
distinguished_name  = req_distinguished_name
string_mask         = utf8only
req_extensions          = v3_req
# Extension to add when the -x509 option is used.
x509_extensions     = usr_cert

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address


# Optionally, specify some defaults.
countryName_default             = PT
stateOrProvinceName_default     = Portugal
localityName_default            = Lisboa
0.organizationName_default      = IFAP
organizationalUnitName_default  = Associação de Criadores de Bovinos de Raça Mirandesa
emailAddress_default            = mirandesa@mirandesa.pt

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_req ]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
subjectAltName      = @SAN
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
#nonRepudiation flag indicates that the private key has sufficient protections in place that the entity named in the certificate cannot later repudiate
#Data encipherment means that the key in the certificate is used to encrypt application data (not TLS, but signing of documents )
keyUsage = critical, nonRepudiation, digitalSignature, nonRepudiation, dataEncipherment
extendedKeyUsage = clientAuth
subjectAltName = @SAN

[SAN]
# in otherName.1 we place the EPC otherName.1 = epcgURI;IA5STRING:sgtin96
# GS1 oid  is as defined by https://www.gs1.org/sites/default/files/docs/cert/cert_2_0-standard-20100610.pdf
# epcgURI (GS1 oid urn: 1.3.4.1.4.1.22695.3.1.1.2.1) is then followed by the EPC (product sgtin96)
otherName.1 = 1.3.4.1.4.1.22695.3.1.1.2.1;UTF8:urn:epc:id:sgtin:560123.3456001.823310118
#in otherName.2 we place the SNIRA ID otherName.2 = ifapURI;IA5STRING:SNIRAID
# ifapURI should be IFAP oid urn but since none found at http://oid-info.com/basic-search.htm)
# we shall use a temporary generated Microsoft from https://gallery.technet.microsoft.com/scriptcenter/56b78004-40d0-41cf-b95e-6e795b2e8a06#content
otherName.2 = 1.2.840.113556.1.8000.2554.60409.5658.22282.18608.39468.5359858.9746403.50.1;UTF8:PT823310118
#in otherName.2 we place the SNIRA ID otherName.2 = ifapURI;IA5STRING:SNIRAID
# pdoURI should be Mirandesa oid urn but since none found at http://oid-info.com/basic-search.htm)
# we shall use a temporary generated Microsoft from https://gallery.technet.microsoft.com/scriptcenter/56b78004-40d0-41cf-b95e-6e795b2e8a06#content
otherName.3 = 1.2.840.113556.1.8000.2554.60409.5658.22282.18608.39468.5359858.9746403.50.2;UTF8:EL60A02018005
[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning
